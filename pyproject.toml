# pyproject.toml

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "streetrace"
version = "0.1.19"
description = "StreetRace is an agentic AI coding partner designed to help engineers leverage AI capabilities directly from the command line to create software."
authors = [{name = "Street Race Team"}]
readme = "README.md"
requires-python = ">=3.12,<4.0"
license = {file = "LICENSE"}
dynamic = ["dependencies"]

[project.scripts]
streetrace = "streetrace.main:main"

[tool.poetry]
package-mode = true
packages = [{include = "streetrace", from = "src"}]

[tool.ruff]
line-length = 88
fix = true

[tool.ruff.lint]
select = ["ALL"]
ignore = ["D203", "D213", "ANN002", "ANN003", "TD003", "PLC0415"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.per-file-ignores]
"scripts/**/*.py" = [
    "T201", # allow print
    "ANN201", # don't require return type annotations
    "ANN204",
    "PLR2004", # allow magic values
]
"tests/**/*.py" = [
    "S101", # asserts allowed in tests.
    "D100", # module-level docstrings for test files are not required.
    "D101", # class-level docstrings for test files are not required.
    "D102", # test code should be documented in-line as opposed to docstrings.
    "D103", # allow skipping method docstrings in tests.
    "D104", # allow skipping docstring in test packages.
    "D107", # allow skipping docstring in __init__(self) in test packages.
    "INP001", # don't require __init__.py in tests.
    "ANN001", # allow parameters without type annotations in tests.
    "ANN101", # allow missing type annotation for self in tests.
    "ANN102", # allow missing type annotation for cls in tests.
    "ANN201", # allow missing return types annotations in tests.
    "ANN202", # allow missing return types annotations in tests.
    "ANN204", # allow missing return types annotations in tests.
    "ANN206", # allow missing return types annotations in tests.
    "PLR2004", # allow magic values in tests.
    "PT011",  # allow broad assert raise checks in tests.
    "FBT001", # boolean positional args are used in fixture helpers
    "FBT002", # booleans with defaults are used in fixture helpers
    "PLR0913", # Too many arguments in function definition
    "EM101",   # Allow inline exception messages
    "TRY003",  # Allow inline exception messages
]

# If using pytest
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",
    # Add integration tests path if separate
]
pythonpath = ["src"] # Make src importable directly
# Enable asyncio mode for pytest-asyncio
asyncio_mode = "auto"
# Performance test markers
markers = [
    "performance: marks tests as performance tests (deselect with '-m \"not performance\"')",
]

# pytest-benchmark configuration
[tool.pytest-benchmark]
# Only run benchmarks when explicitly requested
disable_gc = true
min_rounds = 3
max_time = 10.0
# Configure for import benchmarks
timer = "time.perf_counter"
# Sort by test name for consistent comparisons
sort = "name"
# Don't save benchmarks by default
autosave = false

[tool.deptry.per_rule_ignores]
DEP002 = ["anthropic", "ollama", "openai", "boto3", "deprecated"]

[tool.poetry.group.dev.dependencies]
deptry = "^0.23.0"
python-dotenv = "^1.1.0"
ruff = "^0.12.0"
mypy = "^1.15.0"
bandit = "^1.8.3"
vulture = "^2.14"
coverage = "^7.8.0"
redis = "^6.4.0"


[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"
pytest-mock = "^3.14.0"
pytest-timeout = "^2.3.1"
pytest-asyncio = "^0.23.7"
pytest-benchmark = "^4.0.0"

[tool.poetry.dependencies]
prompt-toolkit = "^3.0.51"
anthropic = "^0.54.0"
google-genai = "^1.12.1"
ollama = "^0.5.1"
openai = "^1.76.0"
pydantic = "^2.11.7"
rich = "^14.0.0"
pathspec = "^0.12.1"
litellm = "^1.67.5"
tenacity = "^9.1.2"
mcp = "^1.7.1"
pyyaml = "^6.0.1"
google-adk = "^1.3.0"
typed-argparse = "^0.3.1"
pypubsub = "^4.0.3"
marko = "^2.1.3"
bashlex = "^0.18"
a2a-sdk = "^0.2.4"
boto3 = "^1.28.57"
tzlocal = "^5.3.1"
deprecated = "^1.2.18"
dotenv = "^0.9.9"
botocore = "^1.29.0"
